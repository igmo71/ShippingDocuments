@using ShippingDocuments.Application
@using ShippingDocuments.Common
@using ShippingDocuments.Domain
@using ShippingDocuments.Infrastructure.OData.Models
@if (SaleDoc is not null)
{
    <div class="form-check mt-2">
        <input class="form-check-input" type="checkbox" value="" id="@ErrorType.ToString()"
               @oninput="@UpdateErrors"
               checked=@SaleDoc.ContainsPaperworkError(ErrorType)>
        <label class="form-check-label" for="@ErrorType.ToString()">
            @(ErrorType.Description())
        </label>
    </div>
}

@code {
    [Parameter]
    public SaleDoc? SaleDoc { get; set; }

    [Parameter]
    public PaperworkErrorType ErrorType { get; set; }

    [Parameter]
    public EventCallback<ErrorCheckBoxParams> OnInput { get; set; }

    private async Task UpdateErrors(ChangeEventArgs args)
    {
        if (SaleDoc is null || args.Value is null)
            return;

        await OnInput.InvokeAsync(new ErrorCheckBoxParams(ErrorType, (bool)args.Value));
    }

    public record ErrorCheckBoxParams(PaperworkErrorType ErrorType, bool IsChecked);
}