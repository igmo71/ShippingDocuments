@page "/saledocs/edit"

@using ShippingDocuments.Application
@using ShippingDocuments.Common
@using ShippingDocuments.Domain
@using ShippingDocuments.Infrastructure.OData
@using ShippingDocuments.Infrastructure.OData.Models

@inject ISaleDocService SaleDocService
@inject NavigationManager NavigationManager
@inject IODataService ODataService

@if (SaleDoc is null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-grow" role="status" style="width: 3rem; height: 3rem;">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <EditForm method="post" Model="SaleDoc" OnSubmit="UpdateSaleDoc" FormName="updateSaleDoc" Enhance>
        <div class="card">
            <div class="card-header">
                <SaleDocHeader SaleDoc="SaleDoc" />
                <SendButtons SaleDoc="SaleDoc" RemovePaperworkErrors="RemovePaperworkErrors" RemoveQuantityErrors="RemoveQuantityErrors" />

            </div>
            <div class="card-body">
                <PaperworkErrors SaleDoc="SaleDoc" UpdatePaperworkErrors="UpdatePaperworkErrors" />
                @if (products is not null)
                {
                    <div class="card mt-2">
                        <div class="card-header">
                            <div class="h5 text-center">Укажите ошибки состава товров, при наличии: </div>
                        </div>
                        <div class="card-body">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>#</th>
                                        <th>Номенклатура</th>
                                        <th>Количество</th>
                                        <th>Факт Кол-во</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var product in products)
                                    {
                                        var errorValue = GetErrorValue(product);
                                        string itemWarning = errorValue is null ? string.Empty : "table-warning";
                                        <tr>
                                            <td>@product.LineNumber</td>
                                            <td>@product.Номенклатура?.Description</td>
                                            <td>@product.Количество</td>
                                            <td>
                                                <div class="row">
                                                    <div class="col">
                                                        <input type="text" value="@errorValue" @oninput="@((args) => CreateOrUpdateError(args, product))" />
                                                    </div>
                                                    <div class="col">
                                                        @if (errorValue is not null)
                                                        {
                                                            <button type="button" class="btn" title="Очистить" @onclick="@(() => DeleteError(product))">
                                                                <i class="bi bi-x-lg"></i>
                                                            </button>
                                                        }
                                                    </div>
                                                </div>

                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                }
            </div>
            <div class="card-footer text-body-secondary">
            </div>
        </div>
    </EditForm>
}

@code {
    [SupplyParameterFromQuery]
    public Guid Id { get; set; }

    [SupplyParameterFromForm]
    private SaleDoc? SaleDoc { get; set; } = new();

    private Document_РеализацияТоваровУслуг_Товары[]? products;

    protected override async Task OnInitializedAsync()
    {
        await LoadSaleDoc();
        await LoadProducts();
    }

    private async Task LoadSaleDoc()
    {
        SaleDoc = await SaleDocService.Get(Id);

        await SetPosition();
    }

    private async Task SetPosition()
    {
        if (SaleDoc == null || SaleDoc.Position != Position.ForDispatch)
            return;

        SaleDoc.Position = Position.Operators;

        await SaleDocService.UpdateAsync(SaleDoc);
    }

    private async Task LoadProducts()
    {
        products = await ODataService.GetDocument_РеализацияТоваровУслуг_Товары(Id.ToString());
    }

    private async Task UpdateSaleDoc(EditContext args)
    {
        UpdatePosition();

        await SaleDocService.UpdateAsync((SaleDoc)args.Model);

        NavigationManager.NavigateTo("saledocs");
    }

    private void UpdatePosition()
    {
        if (SaleDoc == null)
            return;

        switch (SaleDoc.Position)
        {
            case Position.Operators:
                if (SaleDoc.IsCorrect)
                    SaleDoc.Position = Position.Accounting;
                else
                    SaleDoc.Position = Position.Managers;
                break;
            case Position.Managers:
                if (SaleDoc.IsCorrect)
                {
                    SaleDoc.Position = Position.ForDispatch;
                    SaleDoc.Redispatch++;
                }
                break;
            case Position.Accounting:
                if (SaleDoc.IsCorrect)
                    SaleDoc.Position = Position.Closed;
                else
                    SaleDoc.Position = Position.Managers;
                break;
        }
    }

    private void UpdatePaperworkErrors(ErrorCheckBoxParams paperworkErrorCheckBoxParams)
    {
        if (SaleDoc is null)
            return;

        SaleDoc.PaperworkErrors ??= [];

        var paperworkError = SaleDoc.PaperworkErrors.FirstOrDefault(e => e.Type == paperworkErrorCheckBoxParams.ErrorType);

        if (paperworkError is null && paperworkErrorCheckBoxParams.IsChecked)
        {
            paperworkError = new() { SaleDocId = SaleDoc.Id, Type = paperworkErrorCheckBoxParams.ErrorType };

            SaleDoc.PaperworkErrors.Add(paperworkError);
        }
        if (paperworkError is not null && !paperworkErrorCheckBoxParams.IsChecked)
        {
            SaleDoc.PaperworkErrors.Remove(paperworkError);
        }
    }

    private void RemovePaperworkErrors()
    {
        SaleDoc?.PaperworkErrors?.Clear();
    }

    private void RemoveQuantityErrors()
    {
        SaleDoc?.QuantityErrors?.Clear();
    }

    private double? GetErrorValue(Document_РеализацияТоваровУслуг_Товары product)
    {
        var result = SaleDoc?.QuantityErrors?.FirstOrDefault(e => e.LineNumber == product.LineNumber)?.Quantity;

        return result;
    }

    private void CreateOrUpdateError(ChangeEventArgs args, Document_РеализацияТоваровУслуг_Товары product)
    {
        if (SaleDoc is null)
            return;

        if (!double.TryParse(args.Value?.ToString(), out double quantity))
            return;

        SaleDoc.QuantityErrors ??= [];

        var error = SaleDoc.QuantityErrors.FirstOrDefault(e => e.LineNumber == product.LineNumber);

        if (error is null)
        {
            error = new QuantityError() { SaleDocId = SaleDoc.Id, LineNumber = product.LineNumber };

            SaleDoc.QuantityErrors.Add(error);
        }

        error.Quantity = quantity;
    }

    private void DeleteError(Document_РеализацияТоваровУслуг_Товары product)
    {
        var error = SaleDoc?.QuantityErrors?.FirstOrDefault(e => e.LineNumber == product.LineNumber);

        if (error == null)
            return;

        SaleDoc?.QuantityErrors?.Remove(error);
    }
}
