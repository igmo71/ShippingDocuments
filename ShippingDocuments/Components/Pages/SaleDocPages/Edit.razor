@page "/saledocs/edit"

@using ShippingDocuments.Application
@using ShippingDocuments.Common
@using ShippingDocuments.Domain
@using ShippingDocuments.Infrastructure.OData.Models

@inject ISaleDocService SaleDocService
@inject NavigationManager NavigationManager

@if (SaleDoc is null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-grow" role="status" style="width: 3rem; height: 3rem;">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <EditForm method="post" Model="SaleDoc" OnSubmit="UpdateSaleDoc" FormName="updateSaleDoc" Enhance>
        <div class="card">
            <div class="card-header">
                <h5>
                    <span>@Document_РеализацияТоваровУслуг.DocumentName</span>
                    <span>@SaleDoc.Number</span>
                    <span> от </span>
                    <span>@SaleDoc.Date</span>
                </h5>
                <SaleDocTitle SaleDoc="SaleDoc" />
            </div>
            <div class="card-body">                
                <PaperworkErrors SaleDoc="SaleDoc" OnInput="UpdatePaperworkErrors" />
            </div>
            <div class="card-footer text-body-secondary">
                <div class="row">
                    @if (SaleDoc.Position == Position.Operators)
                    {
                        if (SaleDoc.IsCorrect)
                        {
                            <div class="col">
                                <button type="submit" class="btn btn-success">Отправить в Бухгалтерию к приемке </button>
                            </div>
                        }
                        if (SaleDoc.IsIncorrect)
                        {
                            <div class="col">
                                <button type="submit" class="btn btn-danger">Отправить Менеджерам на доработку</button>
                            </div>
                        }
                    }
                    @if (SaleDoc.Position == Position.Managers)
                    {
                        @if (SaleDoc.HasPaperworkErrors)
                        {
                            <div class="col">
                                <div class="form-check mt-2">
                                    <input class="form-check-input" type="checkbox" value="" id="fixedPaperworkErrors"
                                           checked="@(!SaleDoc.HasPaperworkErrors)"
                                           @oninput="RemovePaperworkErrors" />
                                    <label class="form-check-label" for="fixedPaperworkErrors">Перепечатан</label>
                                </div>
                            </div>
                        }
                        @if (SaleDoc.HasQuantityErrors)
                        {
                            <div class="col">
                                <div class="form-check mt-2">
                                    <input class="form-check-input" type="checkbox" value="" id="fixedQuantityErrors"
                                           checked="@(!SaleDoc.HasQuantityErrors)"
                                           @oninput="RemoveQuantityErrors" />
                                    <label class="form-check-label" for="fixedQuantityErrors">Состав товаров скорректирован</label>
                                </div>
                            </div>
                        }
                        @if (SaleDoc.IsCorrect)
                        {
                            <div class="col">
                                <button type="submit" class="btn btn-success" disabled="@(!SaleDoc.IsCorrect)">К отправке</button>
                            </div>
                        }
                    }
                    @if (SaleDoc.Position == Position.Accounting)
                    {
                        if (SaleDoc.IsCorrect)
                        {
                            <div class="col">
                                <button type="submit" class="btn btn-success">Принять</button>
                            </div>
                        }
                        if (SaleDoc.IsIncorrect)
                        {
                            <div class="col">
                                <button type="submit" class="btn btn-danger">Отправить Менеджерам на доработку</button>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </EditForm>
}

@code {
    [SupplyParameterFromQuery]
    public Guid Id { get; set; }

    [SupplyParameterFromForm]
    private SaleDoc? SaleDoc { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadSaleDoc();
    }

    private async Task LoadSaleDoc()
    {
        SaleDoc = await SaleDocService.Get(Id);

        await SetPosition();
    }

    private async Task SetPosition()
    {
        if (SaleDoc == null || SaleDoc.Position != Position.ForDispatch)
            return;

        SaleDoc.Position = Position.Operators;

        await SaleDocService.UpdateAsync(SaleDoc);
    }

    private async Task UpdateSaleDoc(EditContext args)
    {
        UpdatePosition();

        await SaleDocService.UpdateAsync((SaleDoc)args.Model);

        NavigationManager.NavigateTo("saledocs");
    }

    private void UpdatePosition()
    {
        if (SaleDoc == null)
            return;

        switch (SaleDoc.Position)
        {
            case Position.Operators:
                if (SaleDoc.IsCorrect)
                    SaleDoc.Position = Position.Accounting;
                else
                    SaleDoc.Position = Position.Managers;
                break;
            case Position.Managers:
                if (SaleDoc.IsCorrect)
                {
                    SaleDoc.Position = Position.ForDispatch;
                    SaleDoc.Redispatch++;
                }
                break;
            case Position.Accounting:
                if (SaleDoc.IsCorrect)
                    SaleDoc.Position = Position.Closed;
                else
                    SaleDoc.Position = Position.Managers;
                break;
        }
    }

    private void UpdatePaperworkErrors(ErrorCheckBoxParams paperworkErrorCheckBoxParams)
    {
        if (SaleDoc is null)
            return;

        SaleDoc.PaperworkErrors ??= [];

        var paperworkError = SaleDoc.PaperworkErrors.FirstOrDefault(e => e.Type == paperworkErrorCheckBoxParams.ErrorType);

        if (paperworkError is null && paperworkErrorCheckBoxParams.IsChecked)
        {
            paperworkError = new() { SaleDocId = SaleDoc.Id, Type = paperworkErrorCheckBoxParams.ErrorType };

            SaleDoc.PaperworkErrors.Add(paperworkError);
        }
        if (paperworkError is not null && !paperworkErrorCheckBoxParams.IsChecked)
        {
            SaleDoc.PaperworkErrors.Remove(paperworkError);
        }
    }

    private void RemovePaperworkErrors(ChangeEventArgs args)
    {
        SaleDoc?.PaperworkErrors?.Clear();
    }

    private void RemoveQuantityErrors(ChangeEventArgs args)
    {
        SaleDoc?.QuantityErrors?.Clear();
    }
}
